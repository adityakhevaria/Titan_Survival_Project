# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13GDsW1DXEujyTHJMj-7GTSP9VMcdt1nN

## Titanic Prediction Modeling
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df=pd.read_csv('/train.csv')

print(df.head())

print(df.shape)

print(df.isnull().sum())

print(df[df.Embarked.isnull()])

print(df.Survived.value_counts())  #display number of counts for each unique value

print(df.Fare.agg(['min','max','mean','median']))

print(df.sort_values('Fare',ascending=False)[:10])

a=[5,7,8,6,90]

print(np.mean(a))

print(np.median(a))

plt.hist(df.Fare,bins=30)

plt.xlabel('Fare')

plt.ylabel('no of people')

plt.show()

survived=df[df['Survived']==1].Sex.value_counts()

print(survived)

dead=df[df['Survived']==0].Sex.value_counts()
print(dead)

survived=df[df['Survived']==1].Sex.value_counts()
dead=df[df['Survived']==0].Sex.value_counts()

df_new=pd.DataFrame([survived,dead])
df_new.index=['Survived','Dead']
df_new.plot(kind='bar',stacked=True)
plt.show()

survived=df[df['Survived']==1].Pclass.value_counts()
dead=df[df['Survived']==1].Pclass.value_counts()
df_new=pd.DataFrame([survived,dead])
df_new.index=['Survived','Dead']
df_new.plot(kind='bar',stacked=True)
plt.show()

print(df.columns)
df_1=df.loc[:,['Pclass','Sex','Age','Fare']]
print(df_1)

"""
### label encoding
### one hot encoding
"""

c1=pd.get_dummies(df_1['Sex'])
print(c1.head())

print(df.dtypes)

c2=df_1.select_dtypes(exclude=['object'])
print(c2.head())

final_data=pd.concat([c2,c1],axis=1)

print(final_data.head())

print(final_data.isnull().sum())
print(final_data.Age.median())

final_data.Age=final_data.Age.fillna(final_data.Age.median())

print(final_data.isnull().sum())

x=final_data.values
y=df.Survived.values
print(x.shape)
print(y.shape)
print(x.min())

from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.25,random_state=12)

std=StandardScaler()

Xtrain_std= std.fit_transform(xtrain)
Xtest_std=std.transform(xtest)

from sklearn.linear_model import LogisticRegression

log=LogisticRegression()
print(log.fit(Xtrain_std,ytrain))

pred=log.predict(Xtest_std)

from sklearn.metrics import accuracy_score

print(accuracy_score(ytest,pred))